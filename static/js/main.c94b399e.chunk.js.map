{"version":3,"sources":["tasksImage.svg","components/ToDoListContainer.js","components/ToDoListAppContainer.js","components/Header.js","components/CreateNewTaskListForm.js","components/TaskLists.js","components/Modal.js","themeColours.js","components/CustomizeModalContent.js","components/CongratsRain.js","logoSrc.png","components/AboutUsSection.js","components/App.js","reportWebVitals.js","index.js"],"names":["ToDoListContainer","tasks","setTasks","setEditingState","setEditID","setCurrentTaskValue","showAlert","listURL","setShowCongratsRain","theme","filteredTasks","filter","listSource","completed","length","className","map","id","name","draggable","onDragStart","e","dataTransfer","setData","currentTarget","style","color","querySelectorAll","forEach","button","borderColor","onDragEnd","onDragOver","preventDefault","onDrop","taskID","getData","task","find","currentTask","t","onMouseEnter","opacity","querySelector","transform","onMouseLeave","onClick","withRouter","props","match","params","useState","editingState","editID","currentTaskValue","show","message","type","alert","setAlert","isInputFocused","setIsInputFocused","useEffect","document","focus","timeout","setTimeout","clearTimeout","replace","gridTemplateColumns","onSubmit","taskName","listInput","value","trimStart","trimEnd","newItem","Date","getTime","toString","console","log","newTaskLocation","placeholder","autoComplete","onChange","onFocus","onBlur","width","Header","to","Component","CreateNewTaskListForm","taskLists","setTaskLists","showModal","newTaskList","newTaskListCreateInput","url","TaskLists","list","index","Modal","children","setModalProps","pointerEvents","themeColors","primaryColors","proColors","newTasksLocations","CustomizeModalContent","setTheme","setNewTaskLocation","backgroundColor","colorContainer","fontWeight","textContent","taskLocation","CongratsRain","showCongratsRain","rainElements","setRainElements","emojiArray","rainElement","left","Math","floor","random","animationDuration","createRainElement","AboutUsSection","src","logoImg","alt","getItemFromLocalStorage","item","themeFromLocalStorage","localStorage","getItem","App","JSON","parse","modalProps","setItem","stringify","path","render","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"wPAAe,IC8IAA,MA3If,YAUI,IATAC,EASD,EATCA,MACAC,EAQD,EARCA,SACAC,EAOD,EAPCA,gBACAC,EAMD,EANCA,UACAC,EAKD,EALCA,oBACAC,EAID,EAJCA,UACAC,EAGD,EAHCA,QACAC,EAED,EAFCA,oBACAC,EACD,EADCA,MAEIC,EAAgB,GAQpB,OANIA,EADY,WAAZH,EACgBN,EAAMU,QAClB,gBAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,UAAf,OAA+BD,IAAeL,IAAYM,KAG9CZ,EAAMU,QAAO,qBAAGE,cAEfC,OAAS,EAC1B,qBAAKC,UAAU,oBAAf,SACKL,EAAcM,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACf,sBACIH,UAAU,gBACVE,GAAIA,EACJE,UAAU,OACVC,YAAa,SAACC,GACVA,EAAEC,aAAaC,QAAQ,SAAUN,GACjCI,EAAEG,cAAcC,MAAMC,MAAQ,OAC9BL,EAAEG,cACGG,iBAAiB,UACjBC,SAAQ,SAACC,GAAD,OAAaA,EAAOJ,MAAMC,MAAQ,UAC/CL,EAAEG,cAAcC,MAAMK,YAAc,QAExCC,UAAW,SAACV,GACRA,EAAEG,cAAcC,MAAMC,MAAQ,OAC9BL,EAAEG,cACGG,iBAAiB,UACjBC,SAAQ,SAACC,GACNA,EAAOJ,MAAMC,MACC,aAAVjB,EAAuB,OAAS,aAE5CY,EAAEG,cAAcC,MAAMK,YACR,aAAVrB,EAAuB,OAAS,WAExCuB,WAAY,SAACX,GACTA,EAAEY,kBAENC,OAAQ,SAACb,GACLA,EAAEY,iBACF,IAAME,EAASd,EAAEC,aAAac,QAAQ,UAChCC,EAAOpC,EAAMqC,MAAK,qBAAGrB,KAAgBkB,KAC3CjC,EACID,EAAMe,KAAI,SAACuB,GACP,OAAItB,IAAOsB,EAAYtB,GACZoB,EACAF,IAAWI,EAAYtB,GACvBhB,EAAMqC,MAAK,SAACE,GAAD,OAAOA,EAAEvB,KAAOA,KAE3BsB,OAMvBE,aAAc,SAACpB,GACXA,EAAEG,cACGG,iBAAiB,UACjBC,SAAQ,SAACC,GACNA,EAAOJ,MAAMiB,QAAU,UAE/BrB,EAAEG,cAAcmB,cACZ,gBACFlB,MAAMmB,UAAY,iBAExBC,aAAc,SAACxB,GACXA,EAAEG,cACGG,iBAAiB,UACjBC,SAAQ,SAACC,GACNA,EAAOJ,MAAMiB,QAAU,QAE/BrB,EAAEG,cAAcmB,cACZ,gBACFlB,MAAMmB,UAAY,qBA7D5B,UAgEI,wBACI7B,UAAU,qBACV+B,QAAS,WACL5C,EACID,EAAMe,KAAI,SAACqB,GAIP,OAHIA,EAAKpB,KAAOA,IACZoB,EAAKxB,WAAY,GAEdwB,MAGflC,GAAgB,GAChBE,EAAoB,IACpBG,GAAoB,GACpBF,GAAU,EAAM,iBAAkB,YAd1C,SAiBI,0BAAUY,KAAK,wBAEnB,qBAAKH,UAAU,cAAf,SAA8BG,IAC9B,sBAAKH,UAAU,kBAAf,UACI,wBACIA,UAAU,mBACV+B,QAAS,WACL5C,EACID,EAAMU,QAAO,SAAC0B,GAAD,OAAUA,EAAKpB,KAAOA,MAEvCd,GAAgB,GAChBE,EAAoB,IACpBC,GAAU,EAAM,eAAgB,YARxC,SAWI,0BAAUY,KAAK,oBAEnB,wBACIH,UAAU,iBACV+B,QAAS,WACL3C,GAAgB,GAChBC,EAAUa,GACVZ,EAAoBa,IAL5B,SAQI,0BAAUA,KAAK,0BAhElBD,QAuEjB,qBAAKF,UAAU,iBAAf,2BCkBOgC,mBAxJf,SAA8BC,GAC1B,IAAMzC,EAAUyC,EAAMC,MAAMC,OAAOjC,GADF,EAEOkC,oBAAS,GAFhB,mBAE1BC,EAF0B,KAEZjD,EAFY,OAGLgD,mBAAS,IAHJ,mBAG1BE,EAH0B,KAGlBjD,EAHkB,OAIe+C,mBAAS,IAJxB,mBAI1BG,EAJ0B,KAIRjD,EAJQ,OAKP8C,mBAAS,CAC/BI,MAAM,EACNC,QAAS,eACTC,KAAM,YARuB,mBAK1BC,EAL0B,KAKnBC,EALmB,OAUWR,oBAAS,GAVpB,mBAU1BS,EAV0B,KAUVC,EAVU,KAYjCC,qBAAU,WACNC,SAASpB,cAAc,yBAAyBqB,UACjD,IAEHF,qBAAU,WACN,IAAMG,EAAUC,YAAW,WACvB5D,MACD,KACH,OAAO,kBAAM6D,aAAaF,MAC3B,CAACP,IAEJ,IA2CMpD,EAAY,WAA2C,IAA1CiD,IAAyC,yDAA5BC,EAA4B,uDAAlB,GAAIC,EAAc,uDAAP,GACjDE,EAAS,CAAEJ,OAAMC,UAASC,UAG9B,OACI,sBAAK1C,UAAU,uBAAf,UACI,qBAAKA,UAAU,0BAAf,SACKR,EAAQ6D,QAAQ,IAAK,OAEzBV,EAAMH,KACH,qBAAKxC,UAAS,kCAA6B2C,EAAMD,MAAjD,SACKC,EAAMF,UAEX,KACJ,cAAC,EAAD,CACIvD,MAAO+C,EAAM/C,MACbE,gBAAiBA,EACjBC,UAAWA,EACXC,oBAAqBA,EACrBH,SAAU8C,EAAM9C,SAChBI,UAAWA,EACXC,QAASA,EACTC,oBAAqBwC,EAAMxC,oBAC3BC,MAAOuC,EAAMvC,QAEjB,sBACIM,UAAU,mBACVU,MAAO,CACH4C,oBAAoB,GAAD,OACfrB,EAAM/C,MAAMU,QACR,gBAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,UAAf,OACID,IAAeL,IAAYM,KACjCC,OAAS,EACL,YACA,SATlB,UAaI,uBAAMC,UAAU,gBAAgBuD,SAjFnB,SAACjD,GACtBA,EAAEY,iBACF,IAAMsC,EAAWlD,EAAEG,cAAcgD,UAAUC,MAAMC,YAAYC,UACzDC,EAAU,GACTL,GAAanB,EAIPmB,IAAanB,GACpBwB,EAAU,CACN3D,IAAI,IAAI4D,MAAOC,UAAUC,WACzB7D,KAAMqD,EACN3D,WAAYL,EACZM,WAAW,GAEfmE,QAAQC,IAAIL,GACkB,WAA1B5B,EAAMkC,gBACNlC,EAAM9C,SAAN,CAAgB0E,GAAhB,mBAA4B5B,EAAM/C,SACD,UAA1B+C,EAAMkC,iBACblC,EAAM9C,SAAN,sBAAmB8C,EAAM/C,OAAzB,CAAgC2E,KAEpCvE,EAAoB,IACpBC,GAAU,EAAM,cAAe,YACxBiE,GAAYnB,GACnBJ,EAAM9C,SACF8C,EAAM/C,MAAMe,KAAI,SAACqB,GAIb,OAHIA,EAAKpB,KAAOoC,IACZhB,EAAKnB,KAAOqD,GAETlC,MAGflC,GAAgB,GAChBC,EAAU,IACVC,EAAoB,IACpBC,GAAU,EAAM,cAAe,aACvBiE,GAAYnB,IACpBJ,EAAM9C,SAAS8C,EAAM/C,MAAMU,QAAO,qBAAGM,KAAgBoC,MACrD/C,GAAU,EAAM,eAAgB,aAhChCD,EAAoB,IACpBC,GAAU,EAAM,mBAAoB,YAiCxCe,EAAEG,cAAcgD,UAAUC,MAAQ,IAyC1B,UACI,sBAAK1D,UAAU,gBAAf,UACI,uBACI0C,KAAK,OACL0B,YAAY,qBACZjE,KAAK,YACLD,GAAG,YACHmE,aAAa,MACbX,MAAOnB,EACP+B,SAAU,SAAChE,GAAD,OACNhB,EAAoBgB,EAAEG,cAAciD,QAExCa,QAAS,kBAAMzB,GAAkB,IACjC0B,OAAQ,kBAAM1B,GAAkB,MAEpC,qBACI9C,UAAU,sBACVU,MAAO,CACH+D,MAAM,GAAD,OAAK5B,EAAiB,OAAS,WAIhD,wBAAQH,KAAK,SAAb,SACKL,EAAe,OAAS,cAGhCJ,EAAM/C,MAAMU,QACT,gBAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,UAAf,OACID,IAAeL,IAAYM,KACjCC,OAAS,EACP,wBACIC,UAAU,mBACV0C,KAAK,SACLX,QAAS,WACLE,EAAM9C,SAAS,IACfC,GAAgB,GAChBE,EAAoB,IACpBC,GAAU,EAAM,gBAAiB,YAPzC,yBAYA,c,gCChILmF,E,uKAjBP,OACI,yBAAQ1E,UAAU,SAAlB,UACI,qBAAKA,UAAU,UAAf,2BACA,gCACI,cAAC,IAAD,CAAM2E,GAAG,iBAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,uBAAT,sBAEJ,sBAAK3E,UAAU,kBAAf,UACI,qBAAKA,UAAU,wBACf,qBAAKA,UAAU,wBACf,qBAAKA,UAAU,kC,GAZd4E,aCqCNC,MAtCf,YAAwE,IAAvCC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,UACtD,OACI,qCACI,uBAAOhF,UAAU,yBAAjB,gCACA,uBACIA,UAAU,wBACVuD,SAAU,SAACjD,GACPA,EAAEY,iBACF,IAAM+D,EAAc,CAChB9E,KAAMG,EAAEG,cAAcyE,uBAAuBxB,MACxCC,YACAC,WAETqB,EAAYE,IAAMF,EAAY9E,KAAKkD,QAAQ,IAAK,KAChDY,QAAQC,IAAIe,GACRA,IACAF,EAAa,GAAD,mBAAKD,GAAL,CAAgBG,KAC5BD,GAAU,EAAO,QAb7B,UAiBI,uBACItC,KAAK,OACLxC,GAAG,yBACHC,KAAK,yBACLkE,aAAa,QAEjB,wBACI3B,KAAK,SACL1C,UAAU,gCAFd,2BC+BDoF,MAxDf,YAA6E,IAAxDN,EAAuD,EAAvDA,UAAWC,EAA4C,EAA5CA,aAAcC,EAA8B,EAA9BA,UAAW7F,EAAmB,EAAnBA,SAAUD,EAAS,EAATA,MAC/D,OACI,sBAAKc,UAAU,YAAf,UACK8E,EAAU7E,KAAI,SAACoF,EAAMC,GAAP,OACX,eAAC,IAAD,CACIX,GAAE,+BAA0BU,EAAKF,KACjCnF,UAAU,mBAFd,UAKI,qBAAKA,UAAU,eAAf,SAA+BqF,EAAKlF,OACpC,qBAAKH,UAAU,gCAAf,SACmB,WAAdqF,EAAKlF,KAAoB,YAAc,KAE7B,WAAdkF,EAAKlF,KACF,wBACIH,UAAU,uBACV0C,KAAK,SACLX,QAAS,SAACzB,GACNA,EAAEY,iBACF6D,EACID,EAAUlF,QACN,qBAAGO,OAAoBkF,EAAKlF,SAGpChB,EACID,EAAMU,QACF,qBAAGC,aACgBwF,EAAKF,SAbxC,SAkBI,0BAAUhF,KAAK,oBAEnB,OA3BCmF,MA8Bb,wBACItF,UAAU,uBACV+B,QAAS,WACLiD,GACI,EACA,cAAC,EAAD,CACIF,UAAWA,EACXC,aAAcA,EACdC,UAAWA,MAR3B,mBClBGO,MArBf,YAAmD,IAAlCC,EAAiC,EAAjCA,SAAUhD,EAAuB,EAAvBA,KAAMiD,EAAiB,EAAjBA,cAC7B,OACI,qBACIzF,UAAU,kBACVU,MAAO8B,EAAO,CAAEb,QAAS,OAAQ+D,cAAe,OAAU,GAF9D,SAII,sBAAK1F,UAAU,QAAf,UACI,qBACIA,UAAU,mBACV+B,QAAS,WACL0D,GAAc,EAAO,KAH7B,kBAQA,qBAAKzF,UAAU,eAAf,SAA+BwF,UCPhCG,EAVK,CAChBC,cAAe,CACX,CAAEzF,KAAM,UACR,CAAEA,KAAM,SACR,CAAEA,KAAM,OACR,CAAEA,KAAM,WAEZ0F,UAAW,CAAC,CAAE1F,KAAM,cCJlB2F,EAAoB,CAAC,SAAU,SAsGtBC,MApGf,YAII,IAHAC,EAGD,EAHCA,SACAC,EAED,EAFCA,mBACA9B,EACD,EADCA,gBAEA,OACI,qCACI,sBAAKnE,UAAU,sBAAf,UACI,qBAAKA,UAAU,0CAAf,0BAGA,sBAAKA,UAAU,4BAAf,UACI,qBAAKA,UAAU,iBAAf,wBACA,qBAAKA,UAAU,qBAAf,SACK2F,EAAYE,UAAU5F,KAAI,WAAWqF,GAAX,IAAGnF,EAAH,EAAGA,KAAH,OACvB,qBACIH,UAAU,qBACVU,MAAO,CACHwF,gBAAgB,GAAD,OACF,aAAT/F,EACM,UACA,WAEVQ,MACa,aAATR,EACM,OACA,WAEd4B,QAAS,SAACzB,GACO,aAATH,IACA6C,SACKpC,iBACG,uBAEHC,SACG,SAACsF,GAAD,OACKA,EAAezF,MAAM0F,WAClB,SAEhB9F,EAAEG,cAAcC,MAAM0F,WAClB,MACJJ,EAAS7F,KA1BrB,SA+BKA,EAAKkD,QAAQ,IAAK,MAFdiC,QAMjB,qBAAKtF,UAAU,qBAAf,4BACA,qBAAKA,UAAU,yBAAf,SACK2F,EAAYC,cAAc3F,KAAI,WAAWqF,GAAX,IAAGnF,EAAH,EAAGA,KAAH,OAC3B,qBACIH,UAAU,qBACVU,MAAO,CAAEwF,gBAAiB/F,GAC1B4B,QAAS,SAACzB,GACN0C,SACKpC,iBAAiB,uBACjBC,SACG,SAACsF,GAAD,OACKA,EAAezF,MAAM0F,WAClB,SAEhB9F,EAAEG,cAAcC,MAAM0F,WAAa,MACnCJ,EAAS1F,EAAEG,cAAc4F,cAZjC,SAgBKlG,GAFImF,cAQzB,sBAAKtF,UAAU,qBAAf,UACI,qBAAKA,UAAU,yCAAf,+BAGA,qBAAKA,UAAU,yBAAf,SACK8F,EAAkB7F,KAAI,SAACqG,EAAchB,GAAf,OACnB,qBACItF,UAAU,8BAEVU,MACIyD,IAAoBmC,EACd,CAAEF,WAAY,QACd,GAEVrE,QAAS,kBAAMkE,EAAmBK,IARtC,SAUKA,GARIhB,eCrDlBiB,MAjBf,YAA6C,IAArBC,EAAoB,EAApBA,iBAAoB,EACApE,mBAAS,IADT,mBACjCqE,EADiC,KACnBC,EADmB,KAUxC,OAPA3D,qBAAU,WACFyD,GACArD,YAAW,YArBvB,SAA2BsD,EAAcC,GACrC,IAAMC,EAAa,CAAC,eAAM,SAAK,eAAM,SAAK,eAAM,eAAM,SAAK,gBACrDC,EACF,qBACI5G,UAAU,cACVU,MAAO,CACHmG,KAAK,GAAD,OAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,UAArB,MACJC,kBAAkB,GAAD,OAAKH,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAArC,MAJzB,SAOKL,EAAWG,KAAKC,MAAMD,KAAKE,SAAWL,EAAW5G,WAG1D2G,EAAgB,GAAD,mBAAKD,GAAL,CAAmBG,KAStBM,CAAkBT,EAAcC,KACjC,CAAC,QAET,CAACD,EAAcD,IAEd,qBAAKxG,UAAU,eAAf,SACKyG,EAAaxG,KAAI,SAAC2G,GAAD,OAAiBA,QC9BhC,MAA0B,oCCqE1BO,MAlEf,WACI,OACI,0BAASnH,UAAU,iBAAnB,UACI,qBAAIA,UAAU,iBAAd,UACI,qBAAKA,UAAU,qBAAf,sBACA,qBAAKA,UAAU,+BAEnB,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,wBAAf,SACI,qBAAKoH,IAAKC,EAASC,IAAI,OAAOlH,UAAU,YAE5C,sBAAKJ,UAAU,qBAAf,UACI,sPAMA,sWAUR,sBAAKA,UAAU,kBAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,qBAAKA,UAAU,wBAAf,sBACA,qBAAKA,UAAU,+BAEnB,sBAAKA,UAAU,oBAAf,UACI,0BAASA,UAAU,UAAnB,UACI,qBAAKA,UAAU,iBAAf,oDAGA,mBAAGA,UAAU,iBAAb,0IAMJ,0BAASA,UAAU,UAAnB,UACI,qBAAKA,UAAU,iBAAf,yCAGA,mBAAGA,UAAU,iBAAb,mKAIJ,0BAASA,UAAU,UAAnB,UACI,qBAAKA,UAAU,iBAAf,uCAGA,mBAAGA,UAAU,iBAAb,iJChDlBuH,EAA0B,SAACC,GAC7B,IAAMC,EAAwBC,aAAaC,QAAQH,GACnD,OAAIC,GAGO,MAoHAG,MAvGf,WAAgB,IAAD,EACexF,mBATVyF,KAAKC,MAAMJ,aAAaC,QAAQ,WAIrC,IAIA,mBACJzI,EADI,KACGC,EADH,OAEuBiD,mBAC9ByF,KAAKC,MAAMP,EAAwB,eAAiB,CAChD,CAAEpH,KAAM,SAAUgF,IAAK,YAJpB,mBAEJL,EAFI,KAEOC,EAFP,OAOyB3C,mBAAS,CACzCI,MAAM,EACNgD,SAAU,OATH,mBAOJuC,EAPI,KAOQtC,EAPR,OAWqCrD,oBAAS,GAX9C,mBAWJoE,EAXI,KAWc/G,EAXd,KAYLuF,EAAY,WAAoC,IAAnCxC,EAAkC,wDAApBgD,EAAoB,uDAAT,KACxCC,EAAc,CAAEjD,KAAMA,EAAMgD,SAAUA,KAb/B,EAeepD,mBACtBmF,EAAwB,UAAY,UAhB7B,mBAeJ7H,EAfI,KAeGsG,EAfH,OAkBmC5D,mBAAS,SAlB5C,mBAkBJ+B,EAlBI,KAkBa8B,EAlBb,KAuCX,OAnBAlD,qBAAU,WACN2E,aAAaM,QAAQ,QAAStI,KAC/B,CAACA,IAEJqD,qBAAU,WACN2E,aAAaM,QAAQ,YAAaH,KAAKI,UAAUnD,MAClD,CAACA,IAEJ/B,qBAAU,WACN2E,aAAaM,QAAQ,QAASH,KAAKI,UAAL,YAAmB/I,OAClD,CAACA,IAEJ6D,qBAAU,WACN,IAAMG,EAAUC,YAAW,WACvB1D,GAAoB,KACrB,CAAC,OACJ,OAAO,kBAAM2D,aAAaF,MAC3B,CAACsD,IAGA,sBAAKxG,UAAS,cAASN,GAAvB,UACI,cAAC,EAAD,CAAO8C,KAAMuF,EAAWvF,KAAMiD,cAAeA,EAA7C,SACKsC,EAAWvC,WAEhB,eAAC,IAAD,WACI,cAAC,EAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CACI0C,KAAK,iBACLC,OAAQ,kBACJ,cAAC,EAAD,CACIrD,UAAWA,EACXC,aAAcA,EACdC,UAAWA,EACX7F,SAAUA,EACVD,MAAOA,KAGfkJ,OAAK,IAET,cAAC,IAAD,CACIF,KAAK,2BACLC,OAAQ,kBACJ,qCACI,cAAC,EAAD,CACI3B,iBAAkBA,IAEtB,cAAC,EAAD,CACIrC,gBAAiBA,EACjBjF,MAAOA,EACPC,SAAUA,EACVM,oBAAqBA,EACrBC,MAAOA,QAInB0I,OAAK,IAET,cAAC,IAAD,CACIF,KAAK,uBACLG,UAAWlB,UAIvB,wBACInH,UAAU,iCACV+B,QAAS,kBACLiD,GACI,EACA,cAAC,EAAD,CACIgB,SAAUA,EACVC,mBAAoBA,EACpB9B,gBAAiBA,MARjC,2BCrGGmE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASZ,OACL,cAAC,IAAMa,WAAP,UACI,cAAC,EAAD,MAEJhG,SAASiG,eAAe,SAM5BX,M","file":"static/js/main.c94b399e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tasksImage.e7f99c72.svg\";","import React from \"react\";\r\nimport tasksImage from \"../tasksImage.svg\";\r\n\r\nfunction ToDoListContainer({\r\n    tasks,\r\n    setTasks,\r\n    setEditingState,\r\n    setEditID,\r\n    setCurrentTaskValue,\r\n    showAlert,\r\n    listURL,\r\n    setShowCongratsRain,\r\n    theme,\r\n}) {\r\n    let filteredTasks = [];\r\n    if (listURL !== \"My_Day\") {\r\n        filteredTasks = tasks.filter(\r\n            ({ listSource, completed }) => listSource === listURL && !completed\r\n        );\r\n    } else {\r\n        filteredTasks = tasks.filter(({ completed }) => !completed);\r\n    }\r\n    return filteredTasks.length > 0 ? (\r\n        <div className=\"toDoListContainer\">\r\n            {filteredTasks.map(({ id, name }) => (\r\n                <div\r\n                    className=\"taskContainer\"\r\n                    id={id}\r\n                    draggable=\"true\"\r\n                    onDragStart={(e) => {\r\n                        e.dataTransfer.setData(\"taskID\", id);\r\n                        e.currentTarget.style.color = \"#fff\";\r\n                        e.currentTarget\r\n                            .querySelectorAll(\"button\")\r\n                            .forEach((button) => (button.style.color = \"#fff\"));\r\n                        e.currentTarget.style.borderColor = \"#fff\";\r\n                    }}\r\n                    onDragEnd={(e) => {\r\n                        e.currentTarget.style.color = \"#000\";\r\n                        e.currentTarget\r\n                            .querySelectorAll(\"button\")\r\n                            .forEach((button) => {\r\n                                button.style.color =\r\n                                    theme !== \"dark-pro\" ? \"#000\" : \"#adff2f\";\r\n                            });\r\n                        e.currentTarget.style.borderColor =\r\n                            theme !== \"dark-pro\" ? \"#000\" : \"#adff2f\";\r\n                    }}\r\n                    onDragOver={(e) => {\r\n                        e.preventDefault();\r\n                    }}\r\n                    onDrop={(e) => {\r\n                        e.preventDefault();\r\n                        const taskID = e.dataTransfer.getData(\"taskID\");\r\n                        const task = tasks.find(({ id }) => id === taskID);\r\n                        setTasks(\r\n                            tasks.map((currentTask) => {\r\n                                if (id === currentTask.id) {\r\n                                    return task;\r\n                                } else if (taskID === currentTask.id) {\r\n                                    return tasks.find((t) => t.id === id);\r\n                                } else {\r\n                                    return currentTask;\r\n                                }\r\n                            })\r\n                        );\r\n                    }}\r\n                    key={id}\r\n                    onMouseEnter={(e) => {\r\n                        e.currentTarget\r\n                            .querySelectorAll(\"button\")\r\n                            .forEach((button) => {\r\n                                button.style.opacity = \"100%\";\r\n                            });\r\n                        e.currentTarget.querySelector(\r\n                            \".taskContent\"\r\n                        ).style.transform = \"translateX(0)\";\r\n                    }}\r\n                    onMouseLeave={(e) => {\r\n                        e.currentTarget\r\n                            .querySelectorAll(\"button\")\r\n                            .forEach((button) => {\r\n                                button.style.opacity = \"0%\";\r\n                            });\r\n                        e.currentTarget.querySelector(\r\n                            \".taskContent\"\r\n                        ).style.transform = \"translateX(-20px)\";\r\n                    }}\r\n                >\r\n                    <button\r\n                        className=\"completeTaskButton\"\r\n                        onClick={() => {\r\n                            setTasks(\r\n                                tasks.map((task) => {\r\n                                    if (task.id === id) {\r\n                                        task.completed = true;\r\n                                    }\r\n                                    return task;\r\n                                })\r\n                            );\r\n                            setEditingState(false);\r\n                            setCurrentTaskValue(\"\");\r\n                            setShowCongratsRain(true);\r\n                            showAlert(true, \"Task complete!\", \"success\");\r\n                        }}\r\n                    >\r\n                        <ion-icon name=\"checkmark-outline\"></ion-icon>\r\n                    </button>\r\n                    <div className=\"taskContent\">{name}</div>\r\n                    <div className=\"taskEditOptions\">\r\n                        <button\r\n                            className=\"deleteTaskButton\"\r\n                            onClick={() => {\r\n                                setTasks(\r\n                                    tasks.filter((task) => task.id !== id)\r\n                                );\r\n                                setEditingState(false);\r\n                                setCurrentTaskValue(\"\");\r\n                                showAlert(true, \"Task deleted\", \"warning\");\r\n                            }}\r\n                        >\r\n                            <ion-icon name=\"trash-outline\"></ion-icon>\r\n                        </button>\r\n                        <button\r\n                            className=\"editTaskButton\"\r\n                            onClick={() => {\r\n                                setEditingState(true);\r\n                                setEditID(id);\r\n                                setCurrentTaskValue(name);\r\n                            }}\r\n                        >\r\n                            <ion-icon name=\"create-outline\"></ion-icon>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    ) : (\r\n        <div className=\"noTasksMessage\">No Tasks Yet</div>\r\n    );\r\n}\r\n\r\nexport default ToDoListContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport ToDoListContainer from \"./ToDoListContainer\";\r\n\r\nfunction ToDoListAppContainer(props) {\r\n    const listURL = props.match.params.id;\r\n    const [editingState, setEditingState] = useState(false);\r\n    const [editID, setEditID] = useState(\"\");\r\n    const [currentTaskValue, setCurrentTaskValue] = useState(\"\");\r\n    const [alert, setAlert] = useState({\r\n        show: false,\r\n        message: \"Hello world!\",\r\n        type: \"warning\",\r\n    });\r\n    const [isInputFocused, setIsInputFocused] = useState(false);\r\n\r\n    useEffect(() => {\r\n        document.querySelector(\".toDoListAppContainer\").focus();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            showAlert();\r\n        }, 1000);\r\n        return () => clearTimeout(timeout);\r\n    }, [alert]);\r\n\r\n    const handleTaskSubmit = (e) => {\r\n        e.preventDefault();\r\n        const taskName = e.currentTarget.listInput.value.trimStart().trimEnd();\r\n        let newItem = {};\r\n        if (!taskName && !editingState) {\r\n            // display alert\r\n            setCurrentTaskValue(\"\");\r\n            showAlert(true, \"No value entered\", \"warning\");\r\n        } else if (taskName && !editingState) {\r\n            newItem = {\r\n                id: new Date().getTime().toString(),\r\n                name: taskName,\r\n                listSource: listURL,\r\n                completed: false,\r\n            };\r\n            console.log(newItem);\r\n            if (props.newTaskLocation === \"before\") {\r\n                props.setTasks([newItem, ...props.tasks]);\r\n            } else if (props.newTaskLocation === \"after\") {\r\n                props.setTasks([...props.tasks, newItem]);\r\n            }\r\n            setCurrentTaskValue(\"\");\r\n            showAlert(true, \"Task added!\", \"success\");\r\n        } else if (taskName && editingState) {\r\n            props.setTasks(\r\n                props.tasks.map((task) => {\r\n                    if (task.id === editID) {\r\n                        task.name = taskName;\r\n                    }\r\n                    return task;\r\n                })\r\n            );\r\n            setEditingState(false);\r\n            setEditID(\"\");\r\n            setCurrentTaskValue(\"\");\r\n            showAlert(true, \"Task edited\", \"success\");\r\n        } else if (!taskName && editingState) {\r\n            props.setTasks(props.tasks.filter(({ id }) => id !== editID));\r\n            showAlert(true, \"Task deleted\", \"warning\");\r\n        }\r\n        e.currentTarget.listInput.value = \"\";\r\n    };\r\n\r\n    const showAlert = (show = true, message = \"\", type = \"\") => {\r\n        setAlert({ show, message, type });\r\n    };\r\n\r\n    return (\r\n        <div className=\"toDoListAppContainer\">\r\n            <div className=\"taskListNameInTasksList\">\r\n                {listURL.replace(\"_\", \" \")}\r\n            </div>\r\n            {alert.show ? (\r\n                <div className={`alertMessage alert-type-${alert.type}`}>\r\n                    {alert.message}\r\n                </div>\r\n            ) : null}\r\n            <ToDoListContainer\r\n                tasks={props.tasks}\r\n                setEditingState={setEditingState}\r\n                setEditID={setEditID}\r\n                setCurrentTaskValue={setCurrentTaskValue}\r\n                setTasks={props.setTasks}\r\n                showAlert={showAlert}\r\n                listURL={listURL}\r\n                setShowCongratsRain={props.setShowCongratsRain}\r\n                theme={props.theme}\r\n            />\r\n            <div\r\n                className=\"tasksControlArea\"\r\n                style={{\r\n                    gridTemplateColumns: `${\r\n                        props.tasks.filter(\r\n                            ({ listSource, completed }) =>\r\n                                listSource === listURL && !completed\r\n                        ).length > 0\r\n                            ? \"5fr 1.5fr\"\r\n                            : \"100%\"\r\n                    }`,\r\n                }}\r\n            >\r\n                <form className=\"listInputForm\" onSubmit={handleTaskSubmit}>\r\n                    <div className=\"taskInputArea\">\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Enter task here...\"\r\n                            name=\"listInput\"\r\n                            id=\"listInput\"\r\n                            autoComplete=\"off\"\r\n                            value={currentTaskValue}\r\n                            onChange={(e) =>\r\n                                setCurrentTaskValue(e.currentTarget.value)\r\n                            }\r\n                            onFocus={() => setIsInputFocused(true)}\r\n                            onBlur={() => setIsInputFocused(false)}\r\n                        />\r\n                        <div\r\n                            className=\"inputFocusUnderline\"\r\n                            style={{\r\n                                width: `${isInputFocused ? \"100%\" : \"0\"}`,\r\n                            }}\r\n                        ></div>\r\n                    </div>\r\n                    <button type=\"submit\">\r\n                        {editingState ? \"Edit\" : \"Create\"}\r\n                    </button>\r\n                </form>\r\n                {props.tasks.filter(\r\n                    ({ listSource, completed }) =>\r\n                        listSource === listURL && !completed\r\n                ).length > 0 ? (\r\n                    <button\r\n                        className=\"clearTasksButton\"\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                            props.setTasks([]);\r\n                            setEditingState(false);\r\n                            setCurrentTaskValue(\"\");\r\n                            showAlert(true, \"Tasks cleared\", \"warning\");\r\n                        }}\r\n                    >\r\n                        Clear Tasks\r\n                    </button>\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(ToDoListAppContainer);\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <div className=\"appName\">Schedularizer</div>\r\n                <nav>\r\n                    <Link to=\"/schedularizer\">Home</Link>\r\n                    <Link to=\"/schedularizer/about\">About</Link>\r\n                </nav>\r\n                <div className=\"linkOpenMenuBar\">\r\n                    <div className=\"linkOpenMenuBarLine\"></div>\r\n                    <div className=\"linkOpenMenuBarLine\"></div>\r\n                    <div className=\"linkOpenMenuBarLine\"></div>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction CreateNewTaskListForm({ taskLists, setTaskLists, showModal }) {\r\n    return (\r\n        <>\r\n            <label className=\"newTaskListCreateLabel\">New Task List Name</label>\r\n            <form\r\n                className=\"newTaskListCreateForm\"\r\n                onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    const newTaskList = {\r\n                        name: e.currentTarget.newTaskListCreateInput.value\r\n                            .trimStart()\r\n                            .trimEnd(),\r\n                    };\r\n                    newTaskList.url = newTaskList.name.replace(\" \", \"_\");\r\n                    console.log(newTaskList);\r\n                    if (newTaskList) {\r\n                        setTaskLists([...taskLists, newTaskList]);\r\n                        showModal(false, null);\r\n                    }\r\n                }}\r\n            >\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"newTaskListCreateInput\"\r\n                    name=\"newTaskListCreateInput\"\r\n                    autoComplete=\"off\"\r\n                />\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"newTaskListCreateSubmitButton\"\r\n                >\r\n                    Create\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateNewTaskListForm;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CreateNewTaskListForm from \"./CreateNewTaskListForm\";\r\n\r\nfunction TaskLists({ taskLists, setTaskLists, showModal, setTasks, tasks }) {\r\n    return (\r\n        <div className=\"taskLists\">\r\n            {taskLists.map((list, index) => (\r\n                <Link\r\n                    to={`/schedularizer/tasks/${list.url}`}\r\n                    className=\"taskListOpenLink\"\r\n                    key={index}\r\n                >\r\n                    <div className=\"taskListName\">{list.name}</div>\r\n                    <div className=\"additionalTaskListInformation\">\r\n                        {list.name === \"My Day\" ? \"All Tasks\" : \"\"}\r\n                    </div>\r\n                    {list.name !== \"My Day\" ? (\r\n                        <button\r\n                            className=\"deleteTaskListButton\"\r\n                            type=\"button\"\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                setTaskLists(\r\n                                    taskLists.filter(\r\n                                        ({ name }) => name !== list.name\r\n                                    )\r\n                                );\r\n                                setTasks(\r\n                                    tasks.filter(\r\n                                        ({ listSource }) =>\r\n                                            listSource !== list.url\r\n                                    )\r\n                                );\r\n                            }}\r\n                        >\r\n                            <ion-icon name=\"trash-outline\"></ion-icon>\r\n                        </button>\r\n                    ) : null}\r\n                </Link>\r\n            ))}\r\n            <button\r\n                className=\"createTaskListButton\"\r\n                onClick={() => {\r\n                    showModal(\r\n                        true,\r\n                        <CreateNewTaskListForm\r\n                            taskLists={taskLists}\r\n                            setTaskLists={setTaskLists}\r\n                            showModal={showModal}\r\n                        />\r\n                    );\r\n                }}\r\n            >\r\n                &#43;\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskLists;\r\n","import React from \"react\";\r\n\r\nfunction Modal({ children, show, setModalProps }) {\r\n    return (\r\n        <div\r\n            className=\"modalOuterCover\"\r\n            style={show ? { opacity: \"100%\", pointerEvents: \"all\" } : {}}\r\n        >\r\n            <div className=\"modal\">\r\n                <div\r\n                    className=\"modalCloseButton\"\r\n                    onClick={() => {\r\n                        setModalProps(false, \"\");\r\n                    }}\r\n                >\r\n                    &times;\r\n                </div>\r\n                <div className=\"modalContent\">{children}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;\r\n","const themeColors = {\r\n    primaryColors: [\r\n        { name: \"yellow\" },\r\n        { name: \"green\" },\r\n        { name: \"red\" },\r\n        { name: \"purple\" },\r\n    ],\r\n    proColors: [{ name: \"dark-pro\" }],\r\n};\r\n\r\nexport default themeColors;\r\n","import React from \"react\";\r\nimport themeColors from \"../themeColours.js\";\r\n\r\nconst newTasksLocations = [\"before\", \"after\"];\r\n\r\nfunction CustomizeModalContent({\r\n    setTheme,\r\n    setNewTaskLocation,\r\n    newTaskLocation,\r\n}) {\r\n    return (\r\n        <>\r\n            <div className=\"themeColorCustomize\">\r\n                <div className=\"customizeLabel themeColorCustomizeLabel\">\r\n                    Theme Colour\r\n                </div>\r\n                <div className=\"themeColorCustomiseColors\">\r\n                    <div className=\"proColorsLabel\">Pro Colors</div>\r\n                    <div className=\"proColorsCustomize\">\r\n                        {themeColors.proColors.map(({ name }, index) => (\r\n                            <div\r\n                                className=\"customizeColorName\"\r\n                                style={{\r\n                                    backgroundColor: `${\r\n                                        name === \"dark-pro\"\r\n                                            ? \"#282828\"\r\n                                            : \"#fefefe\"\r\n                                    }`,\r\n                                    color:\r\n                                        name === \"dark-pro\"\r\n                                            ? \"#fff\"\r\n                                            : \"#282828\",\r\n                                }}\r\n                                onClick={(e) => {\r\n                                    if (name === \"dark-pro\") {\r\n                                        document\r\n                                            .querySelectorAll(\r\n                                                \".customizeColorName\"\r\n                                            )\r\n                                            .forEach(\r\n                                                (colorContainer) =>\r\n                                                    (colorContainer.style.fontWeight =\r\n                                                        \"500\")\r\n                                            );\r\n                                        e.currentTarget.style.fontWeight =\r\n                                            \"700\";\r\n                                        setTheme(name);\r\n                                    }\r\n                                }}\r\n                                key={index}\r\n                            >\r\n                                {name.replace(\"-\", \" \")}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"primaryColorsLabel\">Primary Colors</div>\r\n                    <div className=\"primaryColorsCustomize\">\r\n                        {themeColors.primaryColors.map(({ name }, index) => (\r\n                            <div\r\n                                className=\"customizeColorName\"\r\n                                style={{ backgroundColor: name }}\r\n                                onClick={(e) => {\r\n                                    document\r\n                                        .querySelectorAll(\".customizeColorName\")\r\n                                        .forEach(\r\n                                            (colorContainer) =>\r\n                                                (colorContainer.style.fontWeight =\r\n                                                    \"500\")\r\n                                        );\r\n                                    e.currentTarget.style.fontWeight = \"700\";\r\n                                    setTheme(e.currentTarget.textContent);\r\n                                }}\r\n                                key={index}\r\n                            >\r\n                                {name}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"setNewTaskLocation\">\r\n                <div className=\"customizeLabel setNewTaskLocationLabel\">\r\n                    New Task Location\r\n                </div>\r\n                <div className=\"newTaskLocationsSelect\">\r\n                    {newTasksLocations.map((taskLocation, index) => (\r\n                        <div\r\n                            className=\"newTaskLocationSelectOption\"\r\n                            key={index}\r\n                            style={\r\n                                newTaskLocation === taskLocation\r\n                                    ? { fontWeight: \"bold\" }\r\n                                    : {}\r\n                            }\r\n                            onClick={() => setNewTaskLocation(taskLocation)}\r\n                        >\r\n                            {taskLocation}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CustomizeModalContent;\r\n","import React, { createElement, useState, useEffect } from \"react\";\r\n\r\nfunction createRainElement(rainElements, setRainElements) {\r\n    const emojiArray = [\"👏\", \"❤\", \"😊\", \"✌\", \"🎉\", \"🎊\", \"✨\", \"🎈\"];\r\n    const rainElement = (\r\n        <div\r\n            className=\"rainElement\"\r\n            style={{\r\n                left: `${Math.floor(Math.random() * 97)}vw`,\r\n                animationDuration: `${Math.floor(Math.random() * 5) + 2}s`,\r\n            }}\r\n        >\r\n            {emojiArray[Math.floor(Math.random() * emojiArray.length)]}\r\n        </div>\r\n    );\r\n    setRainElements([...rainElements, rainElement]);\r\n}\r\n\r\nfunction CongratsRain({ showCongratsRain }) {\r\n    const [rainElements, setRainElements] = useState([]);\r\n    // eslint-disable-next-line\r\n    useEffect(() => {\r\n        if (showCongratsRain) {\r\n            setTimeout(() => {\r\n                createRainElement(rainElements, setRainElements);\r\n            }, [300]);\r\n        }\r\n    }, [rainElements, showCongratsRain]);\r\n    return (\r\n        <div className=\"congratsRain\">\r\n            {rainElements.map((rainElement) => rainElement)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CongratsRain;\r\n","export default __webpack_public_path__ + \"static/media/logoSrc.5d6913ac.png\";","import React from \"react\";\r\nimport logoImg from \"../logoSrc.png\";\r\n\r\nfunction AboutUsSection() {\r\n    return (\r\n        <section className=\"aboutUsSection\">\r\n            <h1 className=\"sectionHeading\">\r\n                <div className=\"aboutUsHeadingText\">About Us</div>\r\n                <div className=\"sectionHeadingUnderline\"></div>\r\n            </h1>\r\n            <div className=\"aboutUsContent\">\r\n                <div className=\"aboutUsContentLogoImg\">\r\n                    <img src={logoImg} alt=\"Logo\" draggable=\"false\" />\r\n                </div>\r\n                <div className=\"aboutUsContentText\">\r\n                    <p>\r\n                        Schedularizer is a simple Application made using React.\r\n                        It helps you to maintain tasks and, in our words,\r\n                        \"schedularize\" your day. This helps you to maintain\r\n                        different lists of tasks and helps you in organisation.\r\n                    </p>\r\n                    <p>\r\n                        It is simple, yet, provides the user with a\r\n                        user-friendly interface. This web app is under development,\r\n                        so features will be added. One of the main features of\r\n                        this app is the emoji rain which appears when you\r\n                        complete a task, which helps you to improve your mood\r\n                        and instills a feel of success when a task is completed.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div className=\"featuresSection\">\r\n                <div className=\"sectionSubHeading\">\r\n                    <div className=\"aboutUsSubHeadingText\">Features</div>\r\n                    <div className=\"sectionHeadingUnderline\"></div>\r\n                </div>\r\n                <div className=\"featuresContainer\">\r\n                    <article className=\"feature\">\r\n                        <div className=\"featureHeading\">\r\n                            The best companion for your busy life!\r\n                        </div>\r\n                        <p className=\"featureContent\">\r\n                            Our application will help you do your tasks on time,\r\n                            when you have a lot of tasks, and remembering all\r\n                            them is difficult.\r\n                        </p>\r\n                    </article>\r\n                    <article className=\"feature\">\r\n                        <div className=\"featureHeading\">\r\n                            Decent GUI to improve mood.\r\n                        </div>\r\n                        <p className=\"featureContent\">\r\n                            A nice GUI which will win your heart. You can customize it with your favourite colour using the cutomize button, as you have to see this everyday.\r\n                        </p>\r\n                    </article>\r\n                    <article className=\"feature\">\r\n                        <div className=\"featureHeading\">\r\n                            Easy and Quick Interface.\r\n                        </div>\r\n                        <p className=\"featureContent\">\r\n                            The application is very simple to use and does not need any manual. So, go ahead and use our app, as soon as possible.\r\n                        </p>\r\n                    </article>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default AboutUsSection;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ToDoListAppContainer from \"./ToDoListAppContainer.js\";\nimport Header from \"./Header.js\";\nimport TaskLists from \"./TaskLists.js\";\nimport Modal from \"./Modal.js\";\nimport CustomizeModalContent from \"./CustomizeModalContent.js\";\nimport CongratsRain from \"./CongratsRain.js\";\nimport AboutUsSection from \"./AboutUsSection\";\n\nconst getItemFromLocalStorage = (item) => {\n    const themeFromLocalStorage = localStorage.getItem(item);\n    if (themeFromLocalStorage) {\n        return themeFromLocalStorage;\n    } else {\n        return null;\n    }\n};\n\nconst getTasksFromLocalStorage = () => {\n    const lsTasks = JSON.parse(localStorage.getItem(\"Tasks\"));\n    if (lsTasks) {\n        return lsTasks;\n    } else {\n        return [];\n    }\n};\n\nfunction App() {\n    const [tasks, setTasks] = useState(getTasksFromLocalStorage());\n    const [taskLists, setTaskLists] = useState(\n        JSON.parse(getItemFromLocalStorage(\"TaskLists\")) || [\n            { name: \"My Day\", url: \"My_Day\" },\n        ]\n    );\n    const [modalProps, setModalProps] = useState({\n        show: false,\n        children: null,\n    });\n    const [showCongratsRain, setShowCongratsRain] = useState(false);\n    const showModal = (show = false, children = null) => {\n        setModalProps({ show: show, children: children });\n    };\n    const [theme, setTheme] = useState(\n        getItemFromLocalStorage(\"Theme\") || \"yellow\"\n    );\n    const [newTaskLocation, setNewTaskLocation] = useState(\"after\");\n\n    useEffect(() => {\n        localStorage.setItem(\"Theme\", theme);\n    }, [theme]);\n\n    useEffect(() => {\n        localStorage.setItem(\"TaskLists\", JSON.stringify(taskLists));\n    }, [taskLists]);\n\n    useEffect(() => {\n        localStorage.setItem(\"Tasks\", JSON.stringify([...tasks]));\n    }, [tasks]);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setShowCongratsRain(false);\n        }, [3500]);\n        return () => clearTimeout(timeout);\n    }, [showCongratsRain]);\n\n    return (\n        <div className={`App ${theme}`}>\n            <Modal show={modalProps.show} setModalProps={setModalProps}>\n                {modalProps.children}\n            </Modal>\n            <Router>\n                <Header />\n                <Switch>\n                    <Route\n                        path=\"/schedularizer\"\n                        render={() => (\n                            <TaskLists\n                                taskLists={taskLists}\n                                setTaskLists={setTaskLists}\n                                showModal={showModal}\n                                setTasks={setTasks}\n                                tasks={tasks}\n                            />\n                        )}\n                        exact\n                    />\n                    <Route\n                        path=\"/schedularizer/tasks/:id\"\n                        render={() => (\n                            <>\n                                <CongratsRain\n                                    showCongratsRain={showCongratsRain}\n                                />\n                                <ToDoListAppContainer\n                                    newTaskLocation={newTaskLocation}\n                                    tasks={tasks}\n                                    setTasks={setTasks}\n                                    setShowCongratsRain={setShowCongratsRain}\n                                    theme={theme}\n                                />\n                            </>\n                        )}\n                        exact\n                    />\n                    <Route\n                        path=\"/schedularizer/about\"\n                        component={AboutUsSection}\n                    />\n                </Switch>\n            </Router>\n            <button\n                className=\"customizeDialogueBoxOpenButton\"\n                onClick={() =>\n                    showModal(\n                        true,\n                        <CustomizeModalContent\n                            setTheme={setTheme}\n                            setNewTaskLocation={setNewTaskLocation}\n                            newTaskLocation={newTaskLocation}\n                        />\n                    )\n                }\n            >\n                Customize\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App.js\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}